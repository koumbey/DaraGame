#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dara-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */
let WSServer = require('ws').Server;
let WS = require('ws');
let wss = new WSServer({server: server});

// Broadcast to all.
wss.broadcast = function broadcast(message) {
  wss.clients.forEach(function each(client) {
    if (client.readyState === WS.OPEN) {
      //client.send(message);
      if(client.userId.indexOf(JSON.parse(message).to)>-1){
        client.send(message);
      }
    }
  });
};

wss.on('connection', function connection(ws) {

  ws.userId=[]; //liste des channels users

  ws.threadId=[]; //liste des channels threads


  ws.on('message', function incoming(message) {

    console.log(`received: ${message}`);

    let data =JSON.parse(message);
    if(data.joinUser) // joindre le tableau des users en envoyant son userId
    {
      //message attendu : {joinUser: userId}
      ws.userId.push(data.joinUser);
    }
    if(data.to) // envoyer un message Ã  un user
    {
      //message attendu : {userId: userId, msg: msg}
      wss.broadcast(message);
    }
  });

  ws.on('error',function(e){ return console.log(e);});
  ws.on('close',function(e){ return console.log('websocket closed'+e);});
});



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


